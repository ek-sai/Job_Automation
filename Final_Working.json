{
  "name": "Final_Working",
  "nodes": [
    {
      "parameters": {
        "fieldToSplitOut": "links",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        736,
        -192
      ],
      "id": "e99ea016-6f80-4c85-bd5a-57f6c145e235",
      "name": "Split Out"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        64,
        80
      ],
      "id": "0578569c-6718-40fa-9f5e-82f0b7055494",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "https://www.linkedin.com/jobs/search/?keywords=machine%20learning%20engineer&location=United%20States&f_TPR=r3600",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        112,
        -192
      ],
      "id": "2a486729-fc2c-4973-8425-91ea2b5fd529",
      "name": "Scrape Last 24 hours Job"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfrom urllib.parse import urlparse, urlunparse\nfrom bs4 import BeautifulSoup\n\n\nhtml = _input.all()[0]['json']['data']\nsoup = BeautifulSoup(html, 'html.parser')\n\njob_links = soup.select('ul.jobs-search__results-list li div a[class*=\"base-card\"]')\n\n\n\njob_urls = []\nfor a_tag in job_links:\n    href = a_tag.get('href')\n    if href:\n\n        parsed = urlparse(href)\n        parsed_new = parsed._replace(netloc=\"www.linkedin.com\")\n        new_url = urlunparse(parsed_new)\n        job_urls.append(new_url)\n\n\n\n\nreturn {\"links\": job_urls}\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        -192
      ],
      "id": "00f1cfba-1782-4353-a6a7-bbb358dbb64d",
      "name": "Extract Job Links"
    },
    {
      "parameters": {
        "url": "={{ $json.links }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        464,
        96
      ],
      "id": "09ae86f7-3f1a-4303-8863-0eaa4f2f0066",
      "name": "Scrape Each Job",
      "retryOnFail": true,
      "executeOnce": false,
      "waitBetweenTries": 5000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\nimport re\n\nhtml = _input.all()[0]['json']['data']\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Security clearance and citizenship keywords to filter out\nclearance_keywords = [\n    'security clearance', 'clearance required', 'clearance eligible',\n    'top secret', 'ts clearance', 'secret clearance', 'ts/sci',\n    'polygraph', 'poly', 'dod clearance', 'government clearance',\n    'active clearance', 'current clearance', 'must have clearance',\n    'us citizen', 'u.s. citizen', 'us citizenship', 'u.s. citizenship',\n    'green card', 'permanent resident', 'citizenship required', 'must be us citizen', 'us persons only'\n]\n\ntry:\n    title = soup.select('div h1')[0].text\n    \n    # Try to get company name, skip if unable to extract\n    company_elements = soup.select('div span a')\n    if not company_elements:\n        return [{\"continue\": True}]   # unable to get company name Ã¢â€ ' skip\n    \n    company = company_elements[0].text.strip()\n    if not company:  # if company name is empty after stripping\n        return [{\"continue\": True}]   # unable to get company name Ã¢â€ ' skip\n    \n    # If company is in skip list Ã¢â€ ' act like \"continue\"\n    if company.lower() in [\"jobright.ai\", \"lensa\", \"jobs via dice\",\"mercor\",\"Robert Half\"]:\n        return [{\"continue\": True}]   # marker object\n    \n    location = soup.select(\"div span[class*='topcard__flavor topcard__flavor--bullet']\")[0].text.strip()\n    \n    jd_container = soup.find(\"div\", class_=\"description__text description__text--rich\")\n    complete_jd = jd_container.get_text(separator=\"\\n\", strip=True) if jd_container else \"no jd\"\n    \n    # Check for security clearance or citizenship requirements - same pattern as company filter\n    if any(keyword in complete_jd.lower() for keyword in clearance_keywords):\n        return [{\"continue\": True}]   # skip jobs with clearance/citizenship requirements\n    \n    urns = [a.get(\"data-semaphore-content-urn\") for a in soup.select(\"a[data-item-type='semaphore']\")]\n    if not urns or not urns[0]:\n        return [{\"continue\": True}]   # no job id Ã¢â€ ' skip like continue\n    \n    job_id = urns[0].split(\":\")[-1]\n    apply_link = \"https://www.linkedin.com/jobs/view/\" + job_id\n    \n    return [{\n        \"title\": title,\n        \"company\": company,\n        \"location\": location,\n        \"jd\": complete_jd,\n        \"link\": apply_link,\n        \"continue\": False\n    }]\nexcept Exception as e:\n    return [{\"continue\": True, \"error\": str(e)}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        96
      ],
      "id": "c607f7bd-c68a-4d69-8569-2646795f0738",
      "name": "Parse"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1adbf2e2-4f6c-4f87-845b-751a9264d4af",
              "name": "message.content",
              "value": "={{ $json.message.content }}",
              "type": "string"
            },
            {
              "id": "3cf64224-4913-4db6-978f-e1be6e50adfe",
              "name": "company",
              "value": "={{ $('Company Filter').item.json.company }}",
              "type": "string"
            },
            {
              "id": "4a103ed9-e666-43cc-b476-844794c0cb6c",
              "name": "job_match_score",
              "value": "={{ JSON.parse($json.message.content).job_match_score }}",
              "type": "number"
            },
            {
              "id": "576635a7-8c66-49f4-8fd6-57192d89ed37",
              "name": "title",
              "value": "={{ $('Company Filter').item.json.title }}",
              "type": "string"
            },
            {
              "id": "c64de9fe-32e7-4bd9-b4af-36bb81ad0cff",
              "name": "link",
              "value": "={{ $('Company Filter').item.json.link }}",
              "type": "string"
            },
            {
              "id": "d0777b68-fc17-4376-9bd1-00fd70f13fca",
              "name": "location",
              "value": "={{ $('Company Filter').item.json.location }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1408,
        80
      ],
      "id": "8edb1b33-a541-46a6-bedb-8a2ab1556057",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        272,
        96
      ],
      "id": "8d516443-48fb-4613-a372-56f444daacc7",
      "name": "Wait",
      "webhookId": "c9cb4878-ae4d-4b8e-bd37-5395011f7761"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -432,
        -192
      ],
      "id": "896e8bde-bf77-4e1c-825b-caa1f87ef269",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "1499f1ac-a7ae-4983-85c7-aa7b8445b2e2",
              "leftValue": "={{ $json.job_match_score }}",
              "rightValue": 75,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1488,
        272
      ],
      "id": "20bef6e2-8ce2-486b-8463-c13938b42b52",
      "name": "Score Filter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "500890d8-f9a0-4075-8419-664c13f9428f",
              "name": "resume",
              "value": "Eswar Sai Korrapati Open To Relocate | 551-344-5356 | eksai0726@gmail.com | https://www.linkedin.com/in/eswarsaikorrapati/ | https://github.com/ek-sai | https://eswarsaiportfolio.org/ | Professional Summary: Results-driven Software engineer having 3 years of experience with deep expertise in building and deploying scalable ML models using MLflow, SageMaker, and DVC. Skilled in designing end-to-end ML pipelines, enabling reproducibility and automation with MLOps frameworks. Strong experience integrating LLMs via OpenAI API, building transformer-based NLP models, and deploying explainable AI systems with SHAP/LIME. Adept at optimizing model performance, orchestrating workflows with Airflow, and managing large-scale data processing using Spark and AWS. Professional Experience: Software Engineer - AI/ML Comcast, San Jose, CA Aug 2024 - Present. Designed and deployed production-grade ML models using TensorFlow and PyTorch, improving prediction accuracy by 20% in real-time streaming systems. Built reproducible ML workflows using Apache Airflow, MLflow, and DVC, enabling versioned pipelines and consistent experiment tracking. Deployed models using AWS SageMaker and Lambda, cutting infrastructure costs by 15% and reducing deployment time by 35%. Applied SHAP and LIME to create explainability dashboards, aiding stakeholders in data-driven decision-making and regulatory compliance. Automated hyperparameter tuning using SageMaker Autopilot and Optuna, leading to an 18% improvement in model F1 score. Built scalable batch inference pipelines with Apache Spark and AWS S3, reducing inference time by 25% across large datasets. Integrated LLM-based chat capabilities using OpenAI API and prompt engineering, enhancing customer support response automation. Collaborated in Agile teams using Git, Docker, and Jenkins to streamline CI/CD across ML development lifecycles. Stack: Python, TensorFlow, PyTorch, MLflow, SageMaker, DVC, Airflow, OpenAI API, Spark, AWS (S3, Lambda, CloudWatch), Docker, Git, Optuna, SHAP, LIME. Software Engineer Dentsu, Hyderabad, India May 2020 - Jul 2022. Engineered RESTful APIs and backend logic using Django and Flask, increasing system throughput and API response efficiency. Developed automated ML workflows using Apache Airflow, improving pipeline reliability and scheduling across data ingestion tasks. Containerized and deployed web services via Docker and AWS EC2, achieving high availability and faster deployment cycles. Built a centralized Feature Store to standardize feature reuse across models, improving experimentation speed and consistency. Leveraged AutoML tools for ad campaign forecasting, reducing manual tuning time by 40% and improving prediction accuracy. Integrated model evaluation metrics (AUC, Precision, Recall, F1 Score) and visualization tools like Tableau to enhance stakeholder reporting. Managed cloud resources using AWS, automated deployments with Jenkins, and versioned projects via Git and GitHub Actions. Stack: Python, Flask, Django, SQL, MongoDB, AutoML, Airflow, Feature Store, Docker, Jenkins, Git, AWS EC2, Tableau. Education: M.S. in Computer Science Montclair State University, NJ Graduated: May 2024 | GPA: 3.65. Projects: RAG-based PDF Summarizer Built a PDF summarization tool using LangChain, OpenAI API, and FAISS for retrieval-augmented generation. Deployed using Streamlit, supporting semantic search, chunking, and real-time user interaction. Next Word Prediction with BERT Fine-tuned a BERT transformer model using PyTorch, achieving 92% top-5 prediction accuracy. Machine Transliteration Designed and implemented a custom encoder-decoder model using PyTorch for sequence-to-sequence tasks, supporting variable-length inputs and outputs. Technical Skills: Programming Languages: Python, C++, SQL, JavaScript. AI/ML & NLP: TensorFlow, PyTorch, Scikit-learn, Keras, BERT, Transformers, GPT, Hugging Face, LangChain, LangGraph. MLOps & Deployment: MLflow, SageMaker, DVC, Airflow, Docker, Kubernetes, CI/CD, Feature Store, Jenkins. Explainability & Evaluation: SHAP, LIME, AUC, Precision, Recall, F1 Score, Confusion Matrix. Cloud & DevOps: AWS (S3, EC2, Lambda, SageMaker, CloudWatch), GitHub Actions. Data & Processing: Apache Spark, Pandas, NumPy, MongoDB, MySQL, Tableau. LLMs & APIs: OpenAI API, Prompt Engineering, LangChain, FastAPI, REST APIs. Tools & Collaboration: Git, Jupyter, Streamlit, Agile, IntelliJ, VS Code. Core CS: Data Structures and Algorithms",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -208,
        -192
      ],
      "id": "84450326-1586-4a1c-a7dd-7922244d4638",
      "name": "resume"
    },
    {
      "parameters": {
        "chatId": "{{ $env.TELEGRAM_CHAT_ID }}",
        "text": "=\n\n\n\n\n\nTitle: {{ $json.title }}\nCompany: {{ $json.company }}\nLocation: {{ $json.location }}\nJob Score: {{ $json.job_match_score }}\nApply: {{ $json.link }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1728,
        256
      ],
      "id": "0bf60c84-3717-4d97-ae73-e407352f3dc6",
      "name": "Send a text message",
      "webhookId": "17b9ebe8-c8d4-4bd9-ad20-45842ddc2c00",
      "credentials": {
        "telegramApi": {
          "id": "lwPN7jDJGKqFYBPI",
          "name": "Telegram account 3"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d8435a84-5e83-47b2-800b-1b2035b3f570",
              "leftValue": "={{ $json.continue }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        848,
        96
      ],
      "id": "71cc2964-d841-4428-97d4-f59d1063a606",
      "name": "Company Filter"
    },
    {
      "parameters": {
        "url": "={{ $('Domain Mapper').item.json.hunter_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2128,
        -48
      ],
      "id": "88bfba75-3c98-4508-9503-b2569b9e2058",
      "name": "Hunter Domain Search"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nlet highestConfidenceEmail = null;\nlet maxConfidence = -1;\n\n// Process each input item\nfor (const item of inputData) {\n    // Check if emails array exists and has items\n    if (item.json.data && item.json.data.emails && item.json.data.emails.length > 0) {\n        const emails = item.json.data.emails;\n        \n        // Find the email with highest confidence\n        for (const email of emails) {\n            if (email.confidence > maxConfidence) {\n                maxConfidence = email.confidence;\n                highestConfidenceEmail = {\n                    value: email.value,\n                    confidence: email.confidence\n                };\n            }\n        }\n    }\n}\n\n// Return the highest confidence email or \"Not Found\" if none exists\nreturn [{\n    json: highestConfidenceEmail || {\n        value: \"Not Found\",\n        confidence: 0\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2128,
        256
      ],
      "id": "258fded7-4a60-4465-b408-f908600c0e33",
      "name": "Email confidence"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "660bf626-decc-47eb-a8f2-4e5f9f6bdff2",
              "leftValue": "={{ $json.value }}",
              "rightValue": "Not Found",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2384,
        256
      ],
      "id": "132d6f20-972b-4a14-84d4-11e20f6d3ed6",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a3a7048c-1f64-4080-8a66-8c7ee1e7fb64",
              "name": "email",
              "value": "={{ $('Email confidence').item.json.value }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2640,
        240
      ],
      "id": "a012debf-c1d5-4f5e-8718-44e049dce74e",
      "name": "Email"
    },
    {
      "parameters": {
        "url": "={{ $('Domain Mapper1').item.json.hunter_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2448,
        624
      ],
      "id": "c837f845-e796-4f98-954f-ea629073a33f",
      "name": "Hunter Domain Search1"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nlet highestConfidenceEmail = null;\nlet maxConfidence = -1;\n\n// Process each input item\nfor (const item of inputData) {\n    // Check if emails array exists and has items\n    if (item.json.data && item.json.data.emails && item.json.data.emails.length > 0) {\n        const emails = item.json.data.emails;\n        \n        // Find the email with highest confidence\n        for (const email of emails) {\n            if (email.confidence > maxConfidence) {\n                maxConfidence = email.confidence;\n                highestConfidenceEmail = {\n                    value: email.value,\n                    confidence: email.confidence\n                };\n            }\n        }\n    }\n}\n\n// Return the highest confidence email or \"Not Found\" if none exists\nreturn [{\n    json: highestConfidenceEmail || {\n        value: \"Not Found\",\n        confidence: 0\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2656,
        624
      ],
      "id": "3c7dd22b-13eb-452a-b040-32a824625f80",
      "name": "Email confidence2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3bdbb407-44de-43c2-bf60-61f4c4261400",
              "name": "email",
              "value": "={{ $json.value }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2864,
        624
      ],
      "id": "9d62508b-a676-4928-bfbb-25570c837b21",
      "name": "Set Email"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=Main Prompt:\nYou are an expert recruiter outreach specialist. Craft a personalized, compelling email that will get a recruiter's attention and prompt a response.\n\nInstructions:\nCreate a professional job application email (150-200 words max) that:\nSubject Line: Create an attention-grabbing subject mentioning 'Application for [Job Title]' and candidate's key strength\nOpening: Clearly state you're applying for the specific position and reference the job posting with the provided URL\nValue Proposition: Highlight 2-3 most relevant qualifications from the resume that directly match the job requirements\nSocial Proof: Include one quantifiable achievement if available\nCall to Action: Request an interview or conversation to discuss the opportunity\nProfessional Closing: Include resume, portfolio, and GitHub links naturally in the email body\n\nTone Requirements:\n- Confident but not arrogant\n- Specific, not generic\n- Results-focused\n- Professional yet personable\n\nOutput Format:\nReturn the response as a JSON object with exactly this structure:\n{\n\"toEmail\": \"Pass through the recipient's email address from input\",\n\"subject\": \"Compelling subject line here\",\n\"body\": \"Complete email body with proper formatting, including resume, portfolio, and GitHub links with professional closing\"\n}\n\nKey Rules:\n- MUST clearly state this is a job application for the posted position\n- MUST include the job posting URL in the email body for easy reference\n- MUST mention you found the job posting on LinkedIn\n- MUST include all three professional links naturally in the email body on separate lines:\n  Resume: https://docs.google.com/document/d/1RyNmI3YjCiacvPhRoqenr-YlL8Rgfs7y9gIA2jv5oQM/edit?tab=t.0\n  Portfolio: https://eswarsaiportfolio.org/\n  GitHub: https://github.com/ek-sai\n- Never use phrases like 'I hope this email finds you well'\n- Always lead with value and relevant qualifications\n- Include specific metrics when possible\n- Make all links contextual and professional, not awkward\n- End with a request for interview/discussion opportunity\n- CRITICAL: Return ONLY valid JSON format with \"toEmail\", \"subject\" and \"body\" keys\n- Include candidate name 'Eswar Sai Korrapati' and professional closing within the body text\n- Pass through the toEmail exactly as provided in input\n- Format the professional links section as:\n  \"Please find my professional materials below:\n  Resume: https://docs.google.com/document/d/1RyNmI3YjCiacvPhRoqenr-YlL8Rgfs7y9gIA2jv5oQM/edit?tab=t.0\n  Portfolio: https://eswarsaiportfolio.org/\n  GitHub: https://github.com/ek-sai\"\n\nInputs:\nCompany Name: {{ $('Parse').item.json.company }}\nJob Title: {{ $('Edit Fields').item.json.title }}\nJob Description: {{ $('Parse').item.json.jd }}\nCandidate Resume Data: {{ $('resume').item.json.resume }}\nJob Link:{{ $('Company Filter').item.json.link }}\ntoEmail: {{ $('If1').item.json.value }}\ntoEmail: {{ $json.email }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2880,
        240
      ],
      "id": "ecdc485e-8f80-47c9-9473-fe5da018b70d",
      "name": "Generate Email Structure",
      "credentials": {
        "openAiApi": {
          "id": "nGkmsv5PlOkJCmIr",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ JSON.parse($('Generate Email Structure').item.json.message.content).subject }}",
        "message": "={{ JSON.parse($('Generate Email Structure').item.json.message.content).body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3232,
        240
      ],
      "id": "97703231-d607-421e-b475-1e822eefc787",
      "name": "Send Email",
      "webhookId": "7f8f4994-8740-4717-8632-4919af9243a4",
      "credentials": {
        "gmailOAuth2": {
          "id": "69ZSY9qgsVD7rJsW",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "84396198-5d25-4928-a6e1-8627298a2043",
              "leftValue": "={{ $json.email }}",
              "rightValue": "Not Found",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3104,
        624
      ],
      "id": "1a705746-e321-4d88-b6a8-c7d5a6c0e92b",
      "name": "If2"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "o3-mini-2025-01-31",
          "mode": "list",
          "cachedResultName": "O3-MINI-2025-01-31"
        },
        "messages": {
          "values": [
            {
              "content": "=Hi, you are a helpful job matcher, you analyze the given resume and job description and providing a job matching score in a json format \n\n\nfor example \n\nyour response should be like\n{\"job_match_score\": 80 }\n\nmake sure you give project json data, dont give any json markdown text and all\n\nmy resume:\n{{ $('resume').item.json.resume }}\n\n\njob_description: \n\n {{ $json.jd }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1072,
        80
      ],
      "id": "d86815d8-ac76-4451-a051-48f7a156c595",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "nGkmsv5PlOkJCmIr",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node: Company Domain Mapper\n// Place this node BEFORE your Hunter.io HTTP Request node\n// This will map company names to their correct domains\n\nconst companyToDomainMapping = {\n  // FAANG + Big Tech\n  'google': 'google.com',\n  'alphabet': 'google.com',\n  'meta': 'meta.com',\n  'facebook': 'meta.com',\n  'amazon': 'amazon.com',\n  'apple': 'apple.com',\n  'netflix': 'netflix.com',\n  'microsoft': 'microsoft.com',\n  'tesla': 'tesla.com',\n  'nvidia': 'nvidia.com',\n  'salesforce': 'salesforce.com',\n  'oracle': 'oracle.com',\n  'adobe': 'adobe.com',\n  'intel': 'intel.com',\n  'amd': 'amd.com',\n  'qualcomm': 'qualcomm.com',\n  'cisco': 'cisco.com',\n  'ibm': 'ibm.com',\n  'servicenow': 'servicenow.com',\n  'workday': 'workday.com',\n  'snowflake': 'snowflake.com',\n  'databricks': 'databricks.com',\n  'palantir': 'palantir.com',\n  'uber': 'uber.com',\n  'lyft': 'lyft.com',\n  'airbnb': 'airbnb.com',\n  'doordash': 'doordash.com',\n  'shopify': 'shopify.com',\n  'stripe': 'stripe.com',\n  'square': 'squareup.com',\n  'block': 'block.xyz',\n  'zoom': 'zoom.us',\n  'slack': 'slack.com',\n  'atlassian': 'atlassian.com',\n  'dropbox': 'dropbox.com',\n  'spotify': 'spotify.com',\n  'twitter': 'twitter.com',\n  'x': 'x.com',\n  'linkedin': 'linkedin.com',\n  'tiktok': 'tiktok.com',\n  'bytedance': 'bytedance.com',\n  'snap': 'snap.com',\n  'snapchat': 'snap.com',\n  'reddit': 'reddit.com',\n  'pinterest': 'pinterest.com',\n  'discord': 'discord.com',\n  'twitch': 'twitch.tv',\n\n  // Financial Services & Banks\n  'jpmorgan': 'jpmorgan.com',\n  'jp morgan': 'jpmorgan.com',\n  'jpmorgan chase': 'jpmorgan.com',\n  'jp morgan chase': 'jpmorgan.com',\n  'goldman sachs': 'gs.com',\n  'morgan stanley': 'morganstanley.com',\n  'bank of america': 'bankofamerica.com',\n  'boa': 'bankofamerica.com',\n  'wells fargo': 'wellsfargo.com',\n  'citigroup': 'citigroup.com',\n  'citi': 'citigroup.com',\n  'american express': 'americanexpress.com',\n  'amex': 'americanexpress.com',\n  'visa': 'visa.com',\n  'mastercard': 'mastercard.com',\n  'paypal': 'paypal.com',\n  'charles schwab': 'schwab.com',\n  'fidelity': 'fidelity.com',\n  'blackrock': 'blackrock.com',\n  'vanguard': 'vanguard.com',\n  'capital one': 'capitalone.com',\n  'discover': 'discover.com',\n  'ally': 'ally.com',\n  'robinhood': 'robinhood.com',\n  'coinbase': 'coinbase.com',\n\n  // Consulting & Professional Services\n  'mckinsey': 'mckinsey.com',\n  'mckinsey & company': 'mckinsey.com',\n  'bain': 'bain.com',\n  'bain & company': 'bain.com',\n  'boston consulting group': 'bcg.com',\n  'bcg': 'bcg.com',\n  'accenture': 'accenture.com',\n  'deloitte': 'deloitte.com',\n  'pwc': 'pwc.com',\n  'pricewaterhousecoopers': 'pwc.com',\n  'ernst & young': 'ey.com',\n  'ey': 'ey.com',\n  'kpmg': 'kpmg.com',\n\n  // Healthcare & Pharma\n  'johnson & johnson': 'jnj.com',\n  'j&j': 'jnj.com',\n  'pfizer': 'pfizer.com',\n  'moderna': 'modernatx.com',\n  'abbott': 'abbott.com',\n  'medtronic': 'medtronic.com',\n  'unitedhealth': 'unitedhealthgroup.com',\n  'united health': 'unitedhealthgroup.com',\n  'anthem': 'anthem.com',\n  'aetna': 'aetna.com',\n  'humana': 'humana.com',\n  'cigna': 'cigna.com',\n\n  // Retail & E-commerce\n  'walmart': 'walmart.com',\n  'target': 'target.com',\n  'costco': 'costco.com',\n  'home depot': 'homedepot.com',\n  'lowes': 'lowes.com',\n  'macys': 'macys.com',\n  'nordstrom': 'nordstrom.com',\n  'best buy': 'bestbuy.com',\n\n  // Automotive\n  'ford': 'ford.com',\n  'general motors': 'gm.com',\n  'gm': 'gm.com',\n  'toyota': 'toyota.com',\n  'honda': 'honda.com',\n  'bmw': 'bmw.com',\n  'mercedes': 'mercedes-benz.com',\n  'mercedes-benz': 'mercedes-benz.com',\n  'volkswagen': 'vw.com',\n  'audi': 'audi.com',\n  'porsche': 'porsche.com',\n  'ferrari': 'ferrari.com',\n  'lamborghini': 'lamborghini.com',\n\n  // Airlines & Travel\n  'delta': 'delta.com',\n  'american airlines': 'aa.com',\n  'united airlines': 'united.com',\n  'southwest': 'southwest.com',\n  'jetblue': 'jetblue.com',\n  'expedia': 'expedia.com',\n  'booking': 'booking.com',\n  'marriott': 'marriott.com',\n  'hilton': 'hilton.com',\n  'hyatt': 'hyatt.com',\n\n  // Media & Entertainment\n  'disney': 'disney.com',\n  'warner bros': 'warnerbros.com',\n  'comcast': 'comcast.com',\n  'verizon': 'verizon.com',\n  'at&t': 'att.com',\n  'att': 'att.com',\n  'tmobile': 't-mobile.com',\n  't-mobile': 't-mobile.com',\n  'sprint': 't-mobile.com',\n\n  // Energy & Utilities\n  'exxonmobil': 'exxonmobil.com',\n  'exxon': 'exxonmobil.com',\n  'chevron': 'chevron.com',\n  'shell': 'shell.com',\n  'bp': 'bp.com',\n  'conocophillips': 'conocophillips.com',\n\n  // Startups & Unicorns\n  'openai': 'openai.com',\n  'anthropic': 'anthropic.com',\n  'figma': 'figma.com',\n  'notion': 'notion.so',\n  'canva': 'canva.com',\n  'airtable': 'airtable.com',\n  'hubspot': 'hubspot.com',\n  'mailchimp': 'mailchimp.com',\n  'zendesk': 'zendesk.com',\n  'twilio': 'twilio.com',\n  'datadog': 'datadog.com',\n  'okta': 'okta.com',\n  'cloudflare': 'cloudflare.com',\n  'mongodb': 'mongodb.com',\n  'elastic': 'elastic.co',\n  'hashicorp': 'hashicorp.com',\n  'gitlab': 'gitlab.com',\n  'github': 'github.com',\n  'bitbucket': 'atlassian.com',\n  'jira': 'atlassian.com',\n  'confluence': 'atlassian.com',  // <-- Added missing comma here\n  'arteraai': 'artera.ai'\n};\n\n// Get the company name from previous node\nconst inputCompany = $('Company Filter').item.json.company;\n\n// Normalize the company name for matching\nfunction normalizeCompanyName(name) {\n  return name.toLowerCase()\n    .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '') // Remove special chars\n    .replace(/\\s+/g, ' ') // Multiple spaces to single space\n    .trim()\n    .replace(/ inc$/i, '')\n    .replace(/ llc$/i, '')\n    .replace(/ ltd$/i, '')\n    .replace(/ corp$/i, '')\n    .replace(/ corporation$/i, '')\n    .replace(/ company$/i, '')\n    .replace(/ co$/i, '')\n    .replace(/ & co$/i, '')\n    .replace(/^the /i, '');\n}\n\nconst normalizedCompany = normalizeCompanyName(inputCompany);\n\n// Function to find domain\nfunction findCompanyDomain(companyName) {\n  const normalized = normalizeCompanyName(companyName);\n  \n  // Direct match\n  if (companyToDomainMapping[normalized]) {\n    return companyToDomainMapping[normalized];\n  }\n  \n  // Partial match - check if any key contains the company name or vice versa\n  for (const [key, domain] of Object.entries(companyToDomainMapping)) {\n    if (normalized.includes(key) || key.includes(normalized)) {\n      return domain;\n    }\n  }\n  \n  // Fallback strategies\n  const cleanName = normalized.replace(/\\s+/g, '');\n  \n  // Common domain patterns to try\n  const possibleDomains = [\n    `${cleanName}.com`,\n    `${cleanName}.co`,\n    `${cleanName}.net`,\n    `${cleanName}.org`\n  ];\n  \n  return possibleDomains[0]; // Default to .com\n}\n\n// Get the domain\nconst domain = findCompanyDomain(inputCompany);\n\n// Construct the Hunter.io URL\nconst hunterUrl = `https://api.hunter.io/v2/domain-search?domain=${domain}&api_key={{ $env.HUNTER_API_KEY }}&department=hr`;\n\n// Debug information\nconst debugInfo = {\n  original_company: inputCompany,\n  normalized_company: normalizedCompany,\n  mapped_domain: domain,\n  hunter_url: hunterUrl,\n  mapping_source: companyToDomainMapping[normalizedCompany] ? 'direct_mapping' : 'fallback'\n};\n\nconsole.log('Domain Mapping Debug:', debugInfo);\n\n// Return the data for the next node\nreturn [{\n  json: {\n    company: inputCompany,\n    domain: domain,\n    hunter_url: hunterUrl,\n    debug: debugInfo\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1872,
        -80
      ],
      "id": "843d1ca9-6e3c-4ef0-945d-fa13e3ee5c10",
      "name": "Domain Mapper"
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node: Company Domain Mapper\n// Place this node BEFORE your Hunter.io HTTP Request node\n// This will map company names to their correct domains\n\nconst companyToDomainMapping = {\n  // FAANG + Big Tech\n  'google': 'google.com',\n  'alphabet': 'google.com',\n  'meta': 'meta.com',\n  'facebook': 'meta.com',\n  'amazon': 'amazon.com',\n  'apple': 'apple.com',\n  'netflix': 'netflix.com',\n  'microsoft': 'microsoft.com',\n  'tesla': 'tesla.com',\n  'nvidia': 'nvidia.com',\n  'salesforce': 'salesforce.com',\n  'oracle': 'oracle.com',\n  'adobe': 'adobe.com',\n  'intel': 'intel.com',\n  'amd': 'amd.com',\n  'qualcomm': 'qualcomm.com',\n  'cisco': 'cisco.com',\n  'ibm': 'ibm.com',\n  'servicenow': 'servicenow.com',\n  'workday': 'workday.com',\n  'snowflake': 'snowflake.com',\n  'databricks': 'databricks.com',\n  'palantir': 'palantir.com',\n  'uber': 'uber.com',\n  'lyft': 'lyft.com',\n  'airbnb': 'airbnb.com',\n  'doordash': 'doordash.com',\n  'shopify': 'shopify.com',\n  'stripe': 'stripe.com',\n  'square': 'squareup.com',\n  'block': 'block.xyz',\n  'zoom': 'zoom.us',\n  'slack': 'slack.com',\n  'atlassian': 'atlassian.com',\n  'dropbox': 'dropbox.com',\n  'spotify': 'spotify.com',\n  'twitter': 'twitter.com',\n  'x': 'x.com',\n  'linkedin': 'linkedin.com',\n  'tiktok': 'tiktok.com',\n  'bytedance': 'bytedance.com',\n  'snap': 'snap.com',\n  'snapchat': 'snap.com',\n  'reddit': 'reddit.com',\n  'pinterest': 'pinterest.com',\n  'discord': 'discord.com',\n  'twitch': 'twitch.tv',\n\n  // Financial Services & Banks\n  'jpmorgan': 'jpmorgan.com',\n  'jp morgan': 'jpmorgan.com',\n  'jpmorgan chase': 'jpmorgan.com',\n  'jp morgan chase': 'jpmorgan.com',\n  'goldman sachs': 'gs.com',\n  'morgan stanley': 'morganstanley.com',\n  'bank of america': 'bankofamerica.com',\n  'boa': 'bankofamerica.com',\n  'wells fargo': 'wellsfargo.com',\n  'citigroup': 'citigroup.com',\n  'citi': 'citigroup.com',\n  'american express': 'americanexpress.com',\n  'amex': 'americanexpress.com',\n  'visa': 'visa.com',\n  'mastercard': 'mastercard.com',\n  'paypal': 'paypal.com',\n  'charles schwab': 'schwab.com',\n  'fidelity': 'fidelity.com',\n  'blackrock': 'blackrock.com',\n  'vanguard': 'vanguard.com',\n  'capital one': 'capitalone.com',\n  'discover': 'discover.com',\n  'ally': 'ally.com',\n  'robinhood': 'robinhood.com',\n  'coinbase': 'coinbase.com',\n\n  // Consulting & Professional Services\n  'mckinsey': 'mckinsey.com',\n  'mckinsey & company': 'mckinsey.com',\n  'bain': 'bain.com',\n  'bain & company': 'bain.com',\n  'boston consulting group': 'bcg.com',\n  'bcg': 'bcg.com',\n  'accenture': 'accenture.com',\n  'deloitte': 'deloitte.com',\n  'pwc': 'pwc.com',\n  'pricewaterhousecoopers': 'pwc.com',\n  'ernst & young': 'ey.com',\n  'ey': 'ey.com',\n  'kpmg': 'kpmg.com',\n\n  // Healthcare & Pharma\n  'johnson & johnson': 'jnj.com',\n  'j&j': 'jnj.com',\n  'pfizer': 'pfizer.com',\n  'moderna': 'modernatx.com',\n  'abbott': 'abbott.com',\n  'medtronic': 'medtronic.com',\n  'unitedhealth': 'unitedhealthgroup.com',\n  'united health': 'unitedhealthgroup.com',\n  'anthem': 'anthem.com',\n  'aetna': 'aetna.com',\n  'humana': 'humana.com',\n  'cigna': 'cigna.com',\n\n  // Retail & E-commerce\n  'walmart': 'walmart.com',\n  'target': 'target.com',\n  'costco': 'costco.com',\n  'home depot': 'homedepot.com',\n  'lowes': 'lowes.com',\n  'macys': 'macys.com',\n  'nordstrom': 'nordstrom.com',\n  'best buy': 'bestbuy.com',\n\n  // Automotive\n  'ford': 'ford.com',\n  'general motors': 'gm.com',\n  'gm': 'gm.com',\n  'toyota': 'toyota.com',\n  'honda': 'honda.com',\n  'bmw': 'bmw.com',\n  'mercedes': 'mercedes-benz.com',\n  'mercedes-benz': 'mercedes-benz.com',\n  'volkswagen': 'vw.com',\n  'audi': 'audi.com',\n  'porsche': 'porsche.com',\n  'ferrari': 'ferrari.com',\n  'lamborghini': 'lamborghini.com',\n\n  // Airlines & Travel\n  'delta': 'delta.com',\n  'american airlines': 'aa.com',\n  'united airlines': 'united.com',\n  'southwest': 'southwest.com',\n  'jetblue': 'jetblue.com',\n  'expedia': 'expedia.com',\n  'booking': 'booking.com',\n  'marriott': 'marriott.com',\n  'hilton': 'hilton.com',\n  'hyatt': 'hyatt.com',\n\n  // Media & Entertainment\n  'disney': 'disney.com',\n  'warner bros': 'warnerbros.com',\n  'comcast': 'comcast.com',\n  'verizon': 'verizon.com',\n  'at&t': 'att.com',\n  'att': 'att.com',\n  'tmobile': 't-mobile.com',\n  't-mobile': 't-mobile.com',\n  'sprint': 't-mobile.com',\n\n  // Energy & Utilities\n  'exxonmobil': 'exxonmobil.com',\n  'exxon': 'exxonmobil.com',\n  'chevron': 'chevron.com',\n  'shell': 'shell.com',\n  'bp': 'bp.com',\n  'conocophillips': 'conocophillips.com',\n\n  // Startups & Unicorns\n  'openai': 'openai.com',\n  'anthropic': 'anthropic.com',\n  'figma': 'figma.com',\n  'notion': 'notion.so',\n  'canva': 'canva.com',\n  'airtable': 'airtable.com',\n  'hubspot': 'hubspot.com',\n  'mailchimp': 'mailchimp.com',\n  'zendesk': 'zendesk.com',\n  'twilio': 'twilio.com',\n  'datadog': 'datadog.com',\n  'okta': 'okta.com',\n  'cloudflare': 'cloudflare.com',\n  'mongodb': 'mongodb.com',\n  'elastic': 'elastic.co',\n  'hashicorp': 'hashicorp.com',\n  'gitlab': 'gitlab.com',\n  'github': 'github.com',\n  'bitbucket': 'atlassian.com',\n  'jira': 'atlassian.com',\n  'confluence': 'atlassian.com',  // <-- Added missing comma here\n  'arteraai': 'artera.ai'\n};\n\n// Get the company name from previous node\nconst inputCompany = $('Company Filter').item.json.company;\n\n// Normalize the company name for matching\nfunction normalizeCompanyName(name) {\n  return name.toLowerCase()\n    .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '') // Remove special chars\n    .replace(/\\s+/g, ' ') // Multiple spaces to single space\n    .trim()\n    .replace(/ inc$/i, '')\n    .replace(/ llc$/i, '')\n    .replace(/ ltd$/i, '')\n    .replace(/ corp$/i, '')\n    .replace(/ corporation$/i, '')\n    .replace(/ company$/i, '')\n    .replace(/ co$/i, '')\n    .replace(/ & co$/i, '')\n    .replace(/^the /i, '');\n}\n\nconst normalizedCompany = normalizeCompanyName(inputCompany);\n\n// Function to find domain\nfunction findCompanyDomain(companyName) {\n  const normalized = normalizeCompanyName(companyName);\n  \n  // Direct match\n  if (companyToDomainMapping[normalized]) {\n    return companyToDomainMapping[normalized];\n  }\n  \n  // Partial match - check if any key contains the company name or vice versa\n  for (const [key, domain] of Object.entries(companyToDomainMapping)) {\n    if (normalized.includes(key) || key.includes(normalized)) {\n      return domain;\n    }\n  }\n  \n  // Fallback strategies\n  const cleanName = normalized.replace(/\\s+/g, '');\n  \n  // Common domain patterns to try\n  const possibleDomains = [\n    `${cleanName}.com`,\n    `${cleanName}.co`,\n    `${cleanName}.net`,\n    `${cleanName}.org`\n  ];\n  \n  return possibleDomains[0]; // Default to .com\n}\n\n// Get the domain\nconst domain = findCompanyDomain(inputCompany);\n\n// Construct the Hunter.io URL\nconst hunterUrl = `https://api.hunter.io/v2/domain-search?domain=${domain}&api_key={{ $env.HUNTER_API_KEY }}`;\n\n// Debug information\nconst debugInfo = {\n  original_company: inputCompany,\n  normalized_company: normalizedCompany,\n  mapped_domain: domain,\n  hunter_url: hunterUrl,\n  mapping_source: companyToDomainMapping[normalizedCompany] ? 'direct_mapping' : 'fallback'\n};\n\nconsole.log('Domain Mapping Debug:', debugInfo);\n\n// Return the data for the next node\nreturn [{\n  json: {\n    company: inputCompany,\n    domain: domain,\n    hunter_url: hunterUrl,\n    debug: debugInfo\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2176,
        592
      ],
      "id": "e895995a-7057-486f-86e7-b017c2301f88",
      "name": "Domain Mapper1"
    }
  ],
  "pinData": {},
  "connections": {
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Last 24 hours Job": {
      "main": [
        [
          {
            "node": "Extract Job Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Job Links": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Each Job": {
      "main": [
        [
          {
            "node": "Parse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse": {
      "main": [
        [
          {
            "node": "Company Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Score Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Scrape Each Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "resume",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Score Filter": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resume": {
      "main": [
        [
          {
            "node": "Scrape Last 24 hours Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Domain Mapper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Company Filter": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hunter Domain Search": {
      "main": [
        [
          {
            "node": "Email confidence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email confidence": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Domain Mapper1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hunter Domain Search1": {
      "main": [
        [
          {
            "node": "Email confidence2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email confidence2": {
      "main": [
        [
          {
            "node": "Set Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Email": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email": {
      "main": [
        [
          {
            "node": "Generate Email Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Email Structure": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Generate Email Structure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Domain Mapper": {
      "main": [
        [
          {
            "node": "Hunter Domain Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Domain Mapper1": {
      "main": [
        [
          {
            "node": "Hunter Domain Search1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9e0b934c-729c-4127-81ff-11b5094793ce",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d5812632ee6ed72dfd5ee9227773feca96dbc5d099c19238ecbeb108e4d20d6d"
  },
  "id": "h2j5DrUAneDVwaoK",
  "tags": []
}